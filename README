
 Overview:
 -----------

 It is a simple casino game application. Required functionality:

  1). User has an account
  2). User can win: money, points and items
  3). Money that user can win are limited
  4). Items that user can win are limited
  5). User must accept or reject an item that he wins
  6). Points are not limited
  7). Points can be converted to the money according to the predefined rate

 Application is implented in the stack of MySql, Php and Nginx stack. Each of them runs in separated docker 
 containers, additional container is created with SQL client started and can be quickly attached to perform
 database queries. 

 Following is the list of created services are created by docker-compose:
  
  * mariadb (sql server)
  * php (php-fpm) 
  * nginx (Web server)
  * client (sql client)

 "src" directory holds all the source files and is mounted inside "nginx" and "php" containers in order to server
 static and dynamic contents. 
 
 "index" directive is pointed to the "index.php" where login prompt is found.

 Start application with:
  
  docker-compose up -d

 and point a browser to the docker host on port 80:

  DOCKER_HOST:80/[index.php]

Application logic: 
-----------------

 Application logic can be summarized in the following steps:

  1) User logs in 
  2) User enters a "game room" where he can do all available 
     actions provided by our simple casino

 We using database to store and manipulate application data. It
 is comprised from the following tables:

  * users           manages registered users
  * user_items      holds available items and money per user
  * treasures       holds treasures per user that were already won

 All the database operations are handled in "db.php" file. All the application related constants
 are listed in 'secrets.php' file and are:

  MYSQL_HOST
  MYSQL_USER
  MYSQL_DATABASE
  MYSQL_USER
  MYSQL_PASSWORD
  ADMIN_USER
  ADMIN_PASS
  T_USERS
  T_USER_ITEMS
  T_TREASURES
  MONEY_GAME_MAX             Maximum amount of money user can win
  MONEY_MAX
  POINT_MAX
  BANK_URL
  MONEY_PER_PACK
  RATIO


 User must exist before he can use an application. On the first login he have to register
 at which point necessary tables will be created. Also, on the very first login, during sign
 up database is created. To provide a full functionality we use three tables defined by: T_USERS,
 T_TREASURES and T_USER_ITEMS variables.

 T_USER_ITEMS and T_TREASURES tables are used to track available and won prizes respectively.

  T_USER_ITEMS layout: 
   -> id        user id (unique for the user)
   -> money     amount of money that user can win
   -> items     available items that user can win

 T_TREASURES layout:

   -> id        user id (unique for the user)
   -> user      username 
   -> money     amount of money that user already won
   -> points    amount of that user already won
   -> items     amount of items that user already won

 User is identified by 'id' column value first generated when user entry is created in T_USERS
 table on a sign up and used thereafter as a foreign key in T_USERS and T_USER_ITEMS.

 Each time new entry is created in T_USER_ITEMS, money and items fields are initialized with default
 values stored in MONEY_GAME_MAX and ITEMS.
 
 After successful registration all the necessary table entries are created and user redirected to
 "login.php" and ending in "room.php".

 "login.php" file is passed during registration and login procedures to ensure user existence and
 setting SESSION variables. Following variables are set:
 
  $_SESSION['user'
  user_id
  logged_in
  ratio

 "room.php" implements "play room" interface. Several buttons are available for the user:
  
  (which?)
 
 Click events are handled by jQuery functions defined in "room.sj", that in turn issues an appropriate API request
 processed by functions in "treasures.class.php". 
  
 "treasures.class.php" implenents game logic while all the data is retrieved using methods defined 
 in "db.php". 

 Three types of wins are available: money, points and items. Function names used for their implementations
 are stored in GAMES array constant and are choosed randomly for each game.

 That's it.
 The algorithm can be described as folloyws:

  1. User clicks "PLAY" button (room.php) 
  2. POST resquest is made to "treasures.class.php" 
  3. "Treasures" class is instantiated, populating treasures array with the 
     user data.
  4. Random function from the "wins" array (win_money, win_points or win_items)
     is executed
  5. Resulting response data is stored inside treasures array and returned in json to the 
     room.php where gots distributed with javascript

 Users 
 treasures array is used to track and manipulate user's prices. An arry will
 have following members:

   money
   points
   items             items that user already wone; unserialized 
                     on each read, thus can be returned to the page
   available_items   available items from the "user_treasures" table
   available_money   available money from the "user_treasures" table
   win               one of the money, points or items
   response          response message

 If user wins the money (win_money), it gots substracted from the available amount
 from "user_items" and added to the "treasures" table. The default amount of the 
 available money is set by MONEY_GAME_MAX, and amount of the money that can
 be won ranges from 0 to MONEY_MAX.

 Available items are defined in "db.php" and stored within BLOB using serialize()
 function.

 When user wins an item it gots randomly choosen and removed from the available
 items. Prompt is issued to make user choose to send or to cancel a price.
 If user chooses to send an item it is added to the "treasures" table, 
 otherwise discarded both "treasures" and "user_items" table (not available any more).

 If user wins points, the amount is randomly selected from the range of 0 to
 POINT_MAX.


 Convertion.
 ----------

 Money can be converted to the points, convertion rate is defined by RATIO constant.
 Implemented in "convert.php".


 Sending money.
 -------------

 The console command to send a money to the user account is:

   curl -d "user=<USER>" -X POST http:/DOCKER_HOST/send_money.php 

 "send_money.php" will call to the send_money() in db.php where user
 money will be loaded and posted to the script set by BANK_URL constant
 (that is meant to be bank api), on successful request database will be 
 updated accordingly.

 Currently amount of money sent defined by MONEY_PER_PACK. If user doesn't
 have enough money, all available money will be sent. There is not option
 (not yet implemented) to send more than one pack per request.


 Admin 
 -------------

 It is an admin page that can help to create users, recreate database and a unit test
 for the convertion between money and points. 

 The admin page is at:

    http://<HOST>:8080/admin.php

 The default user "admin" with password "admin" is created by default.



 * Currently an "play" room page has options that should be available only for administrator, but
 separation is not implemented yet. Nevertheles, it should provide you with the complete testing availability.
