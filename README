
 Application is implented in docker containers. Three containers will be created:
  
  - mariadb
  - php (PHP-FPM) 
  - nginx

 "src" directory is mounted inside "nginx" and "php" containers in order to server
 static and dynamic content. "index" directive is pointed to the "index.php" where
 login prompt is found.

 Start application with:
  
  docker-compose up -d

 and point a browser to the docker host on port 8080:

  DOCKER_HOST:8008/[index.php]

 
 Note "secret.php" file, it defines necessary constants.

 "mariadb" container maintaines an SQL database. The tables are:

  - users           manages registered users
  - user_items      holds available items and money per user
  - treasures       holds treasures that were already won


 After signup a user and hashed password will be stored in the "users" table and user
 will be redirected to the "play room" (room.php).

 Also entries in "user_items" and "treasures" tables will be created.
 
 The purpose of the "user_items" table is to track available items for the user.
 The layout is:

  id        user id (unique for the user)
  money     amount of money that user can win
  items     available items that user can win

 Contrary, "treasures" table list user wins, the layout is:

  id        user id (unique for the user)
  user      username 
  money     amount of money that user already win
  points    amount of that user already win
  items     amount of items that user already win

 The game logic is implemented in "treasures.class.php". User data is retrieved
 using methods defined in "db.php". 

 The algorithm can be described as follows:

  1. User clicks "PLAY" button (room.php) 
  2. POST resquest is made to "treasures.class.php" 
  3. "Treasures" class is instantiated, populating treasures array with the 
     user data.
  4. Random function from the "wins" array (win_money, win_points or win_items)
     is executed
  5. Resulting response data is stored inside treasures array and returned in json to the 
     room.php where gots distributed with javascript

 treasures array is used to track and manipulate user's prices. An arry will
 have following members:

   money
   points
   items             items that user already wone; unserialized 
                     on each read, thus can be returned to the page
   available_items   available items from the "user_treasures" table
   available_money   available money from the "user_treasures" table
   win               one of the money, points or items
   response          response message

 If user wins the money (win_money), it gots substracted from the available amount
 from "user_items" and added to the "treasures" table. The default amount of the 
 available money is set by MONEY_GAME_MAX, and amount of the money that can
 be won ranges from 0 to MONEY_MAX.

 Available items are defined in "db.php" and stored within BLOB using serialize()
 function.

 When user wins an item it gots randomly choosen and removed from the available
 items. Prompt is issued to make user choose to send or to cancel a price.
 If user chooses to send an item it is added to the "treasures" table, 
 otherwise discarded both "treasures" and "user_items" table (not available any more).

 If user wins points, the amount is randomly selected from the range of 0 to
 POINT_MAX.


 Convertion.
 ----------

 Money can be converted to the points, convertion rate is defined by RATIO constant.
 Implemented in "convert.php".


 Sending money.
 -------------

 The console command to send a money to the user account is:

   curl -d "user=<USER>" -X POST http:/DOCKER_HOST/send_money.php 

 "send_money.php" will call to the send_money() in db.php where user
 money will be loaded and posted to the script set by BANK_URL constant
 (that is meant to be bank api), on successful request database will be 
 updated accordingly.

 Currently amount of money sent defined by MONEY_PER_PACK. If user doesn't
 have enough money, all available money will be sent. There is not option
 (not yet implemented) to send more than one pack per request.


 Admin 
 -------------

 It is an admin page that can help to create users, recreate database and a unit test
 for the convertion between money and points. 

 The admin page is at:

    http://<HOST>:8080/admin.php

 The default user "admin" with password admin is always created.



 * Currently an "play" room page has options that should be available only for administrator, but
 separation is not implemented yet. Nevertheles, it should provide you with the complete testing availability.
